openapi: 3.0.0
# https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md
servers:
  - url: 'http://localhost:8080'
info:
  version: 1.0.0
  title: Sample Blog API
  description: |
    A sample API that uses blog as an example.
  contact:
    name: Andriy Kornatskyy
    email: andriy.kornatskyy@live.com
  license:
    name: MIT
    url: https://github.com/akornatskyy/sample-blog-api-go/blob/master/LICENSE
tags:
  - name: membership
    description: Everything about membership.
  - name: posts
    description: Everything about blog posts.
  - name: public
    description: Everything about public features.
x-tagGroups:
  - name: General
    tags:
      - membership
  - name: Posts
    tags:
      - posts
  - name: Public
    tags:
      - public
paths:
  /signin:
    post:
      summary: Sign in user
      operationId: signIn
      tags:
        - membership
      requestBody:
        $ref: '#/components/requestBodies/SignInRequest'
      responses:
        '200':
          $ref: '#/components/responses/SignInResponse'
        '400':
          $ref: '#/components/responses/ValidationErrors'
        '422':
          $ref: '#/components/responses/UnprocessedEntity'
  /signup:
    post:
      summary: Sign up user
      operationId: signUp
      tags:
        - membership
      requestBody:
        $ref: '#/components/requestBodies/SignUpRequest'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/ValidationErrors'
        '422':
          $ref: '#/components/responses/UnprocessedEntity'
  /signout:
    get:
      summary: Invalidates access token
      operationId: signOut
      tags:
        - membership
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
  /user:
    get:
      summary: Returns currently signed in user details
      operationId: getCurrentUser
      tags:
        - membership
      responses:
        '200':
          $ref: '#/components/responses/UserResponse'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /posts:
    get:
      summary: Search posts
      operationId: searchPosts
      tags:
        - posts
      parameters:
        - $ref: "#/components/parameters/q"
        - $ref: "#/components/parameters/page"
      responses:
        '200':
          $ref: '#/components/responses/SearchPostResponse'
        '400':
          $ref: '#/components/responses/ValidationErrors'
  /posts/{slug}:
    get:
      summary: Get a post
      operationId: getPost
      tags:
        - posts
      parameters:
        - $ref: "#/components/parameters/slug"
        - $ref: "#/components/parameters/fields"
      responses:
        '200':
          $ref: '#/components/responses/PostResponse'
        '400':
          $ref: '#/components/responses/ValidationErrors'
        '404':
          $ref: '#/components/responses/NotFound'
  /quote/daily:
    get:
      summary: Returns daily quote
      operationId: dailyQuote
      tags:
        - public
      responses:
        '200':
          $ref: '#/components/responses/DailyQuoteResponse'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  schemas:
    ErrorState:
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorDetail"
      required:
        - errors
    ErrorDetail:
      properties:
        domain:
          type: string
          example: membership
        type:
          type: string
          example: field
        location:
          type: string
          example: username
        reason:
          type: string
          example: required
        message:
          type: string
          example: Required field cannot be left blank.
      required:
        - domain
        - type
        - location
        - reason
        - message
    Paging:
      properties:
        before:
          type: number
          example: 0
        after:
          type: number
          example: 2
    Author:
      properties:
        first_name:
          type: string
          example: Sophia
        last_name:
          type: string
          example: Williams
      required:
        - first_name
        - last_name
    Post:
      properties:
        slug:
          type: string
          example: adipisci-quia-dolorem-rerum
        title:
          type: string
          example: Adipisci Quia Dolorem Rerum
        message:
          type: string
          example: Facere quos eum omnis dicta exercitationem nobis esse ducimus ...
        created_on:
          type: string
          format: date-time
        author:
          $ref: "#/components/schemas/Author"
      required:
        - slug
        - title
        - message
        - created_on
        - author
    Comment:
      properties:
        author:
          $ref: "#/components/schemas/Author"
        created_on:
          type: string
          format: date-time
        moderated:
          type: boolean
        message:
          type: string
          example: corporis aut in aliquam qui quas cumque veniam earum est
    Permissions:
      properties:
        create_comment:
          type: boolean
    Quote:
      properties:
        author:
          type: string
          example: Leonardo da Vinci
        message:
          type: string
          example: Simplicity is the ultimate sophistication.
      required:
        - author
        - message
  parameters:
    q:
      name: q
      in: query
      description: text to search
      required: false
      schema:
        type: string
        maxLength: 20
    page:
      name: page
      in: query
      description: page number
      required: false
      schema:
        type: number
        format: int32
        default: 0
        minimum: 0
        maximum: 9
    slug:
      name: slug
      in: path
      description: post slug
      required: true
      schema:
        type: string
        minimum: 2
        maximum: 35
        example: inventore-hic-voluptatem
    fields:
      name: fields
      in: query
      description: fields to include
      required: false
      schema:
        type: string
        maximum: 20
        pattern: '^(comments|permissions)(,(comments|permissions))?$'
        example: comments,permissions
  requestBodies:
    SignInRequest:
      description: user credentials
      required: true
      content:
        application/json:
          schema:
            properties:
              username:
                type: string
                minLength: 2
                maxLength: 20
                example: demo
              password:
                type: string
                format: password
                minLength: 8
                maxLength: 12
                example: password
            required:
              - username
              - password
    SignUpRequest:
      description: user registration information
      required: true
      content:
        application/json:
          schema:
            properties:
              email:
                type: string
                format: email
                minLength: 6
                maxLength: 50
              username:
                type: string
                minLength: 2
                maxLength: 20
                example: demo
              password:
                type: string
                format: password
                minLength: 8
                maxLength: 12
              confirmPassword:
                type: string
                format: password
            required:
              - email
              - username
              - password
              - confirmPassword
  responses:
    NoContent:
      description: no content
    ValidationErrors:
      description: validation errors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorState'
    Forbidden:
      description: unauthorized access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorState'
          example:
            errors:
              - domain: "HTTP"
                type: "authorization"
                location: "token"
                reason: "forbidden"
                message: "You do not have permission to access this resource using the credentials that you supplied."
    NotFound:
      description: resource not found
    UnprocessedEntity:
      description: unprocessable entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorState'
          example:
            errors:
              - domain: "JSON"
                type: "decode"
                location: "HTTP request body"
                reason: "EOF"
                message: "Unable to parse JSON."
    SignInResponse:
      description: ok
      content:
        application/json:
          schema:
            properties:
              username:
                type: string
                example: demo
            required:
              - username
    UserResponse:
      description: ok
      content:
        application/json:
          schema:
            properties:
              username:
                type: string
                example: demo
              firstName:
                type: string
                example: Max
              lastName:
                type: string
                example: Johnson
            required:
              - username
    SearchPostResponse:
      description: ok
      content:
        application/json:
          schema:
            properties:
              paging:
                $ref: "#/components/schemas/Paging"
              items:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
            required:
              - paging
              - items
    PostResponse:
      description: ok
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Post"
              - type: object
                properties:
                  permissions:
                    $ref: "#/components/schemas/Permissions"
                  comments:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
    DailyQuoteResponse:
      description: daily quote
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Quote"
